package com.DigitalTransformation.SpringProj.lighting;

import com.DigitalTransformation.SpringProj.MapItem;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.MediaType;
import org.springframework.http.RequestEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.client.RestTemplate;

import java.util.ArrayList;
import java.util.List;

@Controller // This means that this class is a Controller
@RequestMapping(path="/lighting") // This means URL's start with /demo (after Application path)
public class LightingController{
    @Autowired // This means to get the bean called lightingRepository// Which is auto-generated by Spring, we will use it to handle the data
    private LightingRepository lightingRepository;

    @Autowired
    RestTemplate restTemplate;

    /**
     * Returns all the lighting records from the database
     */
    @GetMapping(path="/all")
    public @ResponseBody List<Lighting> getLighting() {

        return lightingRepository.findAll();
    }

    /**
     * Returns the total of the scores for the individual routes from the database.
     */

    @GetMapping(path="/calculateTotal/{Startlatitude},{Startlongitude},{Endlatitude},{Endlongitude}")
    public @ResponseBody
    ArrayList<Integer> getTotalLighting(@PathVariable String Endlatitude, @PathVariable String Endlongitude, @PathVariable String Startlatitude, @PathVariable String Startlongitude) {

        String url = String.format("http://localhost:9192/routes/getRoutes/"+Startlatitude+","+Startlongitude+","+Endlatitude+","+Endlongitude);
        ParameterizedTypeReference<ArrayList<ArrayList<MapItem>>>  responseType = new ParameterizedTypeReference<ArrayList<ArrayList<MapItem>> >() {};
        RequestEntity<Void> request = RequestEntity.get(url).accept(MediaType.APPLICATION_JSON).build();
        ArrayList<ArrayList<MapItem>>  response = restTemplate.exchange(request, responseType).getBody();
        Integer overallScore = 0;
        ArrayList<Integer> routeLightingScore = new ArrayList<Integer>();
        int counter = 0;
        // For all of the routes go to the lightingRepository and run the query to sum the values for a specific route
        for (ArrayList<MapItem> list : response)
        {
            for (MapItem value : list)
            {
                overallScore = overallScore + lightingRepository.crossRefAndCountInstances(value.getLatitude(),value.getLongitude());
            }
            routeLightingScore.add(overallScore);
            counter++;
        }
        return routeLightingScore;
    }

    @PostMapping(path = "/add")
    public @ResponseBody
    Boolean addNewLighting(@RequestParam int id, @RequestParam Double longitude, @RequestParam Double latitude, @RequestParam int lightingRating)
    {
            Lighting lighting = new Lighting();
            lighting.setLightingRating(lightingRating);
            lighting.setLatitude(latitude);
            lighting.setLongitude(longitude);
            lightingRepository.save(lighting);
            return true;
    }
}
