package com.DigitalTransformation.SpringProj.user;

/*The Java email sending functionality is based off- Reference: https://www.baeldung.com/java-email*/
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.web.bind.annotation.*;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;

import static com.DigitalTransformation.SpringProj.user.User.passwordEncoder;

@RestController  // This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /demo (after Application path)
public class UserController {
    @Autowired
    // This means to get the bean called userRepository// Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;
    private User loggedInUser = null;
    private boolean success;

    /**
     * Adds a user to the database.
     * If the user dosent exist then register them.
     */
    @PostMapping(path = "/add") // Map ONLY POST Requests
    public @ResponseBody
    String addNewUser(@RequestParam String name, @RequestParam String password1, @RequestParam String password2,@RequestParam String emailEmergencyContact,
                      @RequestParam String phoneEmergencyContact) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        Iterable<User> users = getAllUsers();
        boolean userExists = false;
        User n = null;
        for (User user : users) {
            if (user.getName().equals(name)) {
                userExists = true;
                return "false";
            }
        }
        if (!userExists&&validEmail(emailEmergencyContact)&&password1.equals(password2)) {
            password1 = passwordEncoder.encode(password1);
            n = new User(name, password1, emailEmergencyContact, phoneEmergencyContact);
            userRepository.save(n);
            return "true";
        }
        else if(!password1.equals(password2))
        {
            return "passwords don't match";
        }
        else if(!validEmail(emailEmergencyContact))
        {
            return "invalid email";
        }
        return "false";
    }

    /**
     *Return all the users
     */
    @GetMapping(path = "/all")
    public @ResponseBody
    Iterable<User> getAllUsers() {
        return userRepository.findAll();
    }

    @GetMapping(path = "/phoneNumber")
    public @ResponseBody
    String getPhoneNumber() {
        if(loggedInUser==null)
        {
            return "";
        }
        else {
            return loggedInUser.getPhoneEmergencyContact();
        }
    }

    /**
     *Log a user into the system
     * Checks the users username and password
     */
    @GetMapping("/{name}/{password}")
    @ResponseBody
    User authenticateUser(@PathVariable String name, @PathVariable String password) {
        Iterable<User> users = getAllUsers();
        Boolean isPasswordCorrect;
        for (User user: users) {
            isPasswordCorrect = passwordEncoder.matches(password,user.getPassword());
            if (user.getName().equals(name) && isPasswordCorrect) {
                loggedInUser = user;
                return user;
            }
        }
        return null;
    }

    /**
     *Log the user out of the system
     */
    @GetMapping("/logout")
    @ResponseBody
    String logout() {
        if (loggedInUser != null) {
            loggedInUser = null;
            return "true";
        } else {
            return "false";
        }
    }

    @Autowired
    private JavaMailSender javaMailSender;

    /**
     *The method for creating an email when the user triggers the alert in the front end
     */
    void sendEmail() {
        if (loggedInUser != null) {
            SimpleMailMessage msg = new SimpleMailMessage();
            msg.setTo(loggedInUser.getEmergencyContactEmail());
            String subject = "Please check in on " + loggedInUser.getName();
            msg.setSubject(subject);
            msg.setText("");
            javaMailSender.send(msg);
        }
    }

    /**
     * The method for sending the email. This method calls to the "send email" method. **/
    @GetMapping(path="/sendEmail")
    public @ResponseBody
    void send() {
        sendEmail();
        return;
    }


    /**
     * The method for sending the email. This method calls to the "send email" method.
     * This code was based off: Reference: https://examples.javacodegeeks.com/enterprise-java/mail/validate-email-address-with-java-mail-api/ .
     */

    public static boolean validEmail(String email) {
        boolean result = true;
        try {
            InternetAddress emailAddr = new InternetAddress(email);
            emailAddr.validate();
        } catch (AddressException ex) {
            result = false;
        }
        return result;
    }
}

