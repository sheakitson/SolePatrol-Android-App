package com.DigitalTransformation.SpringProj.traffic;

import com.DigitalTransformation.SpringProj.MapItem;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.MediaType;
import org.springframework.http.RequestEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.client.RestTemplate;

import java.util.ArrayList;
import java.util.List;

@Controller // This means that this class is a Controller
@RequestMapping(path="/traffic") // This means URL's start with /demo (after Application path)
public class TrafficController {
    @Autowired // This means to get the bean called userRepository// Which is auto-generated by Spring, we will use it to handle the data
    private TrafficRepository trafficRepository;

    @Autowired
    RestTemplate restTemplate;

    /**
     * Returns all the lighting records from the database
     */
    @GetMapping(path="/all")
    public @ResponseBody List<Traffic> getTraffic() {
        // This returns a JSON or XML with the users
        return trafficRepository.findAll();
    }

    /**
     * Returns the total of the scores for the individual routes from the database.
     */
    @GetMapping(path="/calculateTotal/{Startlatitude},{Startlongitude},{Endlatitude},{Endlongitude}")
    public @ResponseBody
    ArrayList<Integer> getTotalTraffic(@PathVariable String Endlatitude, @PathVariable String Endlongitude, @PathVariable String Startlatitude, @PathVariable String Startlongitude) {

        String url = String.format("http://localhost:9192/routes/getRoutes/"+Startlatitude+","+Startlongitude+","+Endlatitude+","+Endlongitude);
        ParameterizedTypeReference<ArrayList<ArrayList<MapItem>>> responseType = new ParameterizedTypeReference<ArrayList<ArrayList<MapItem>> >() {};
        //RequestEntity<Void> request = RequestEntity.get(url).accept(MediaType.APPLICATION_JSON).build();
        //ArrayList<ArrayList<MapItem>>  response = restTemplate.exchange(request, responseType).getBody();
        RequestEntity<Void> request = RequestEntity.get(url).accept(MediaType.APPLICATION_JSON).build();
        ArrayList<ArrayList<MapItem>>  response = restTemplate.exchange(request, responseType).getBody();
        Integer overallScore = 0;
        ArrayList<Integer> routeLTrafficScore = new ArrayList<Integer>();
        int counter = 0;
        // For all of the routes go to the lightingRepository and run the query to sum the values for a specific route
        for (ArrayList<MapItem> list : response)
        {
            for (MapItem value : list)
            {
                overallScore = overallScore + trafficRepository.crossRefAndCountInstancesTraffic(value.getLatitude(),value.getLongitude());
            }
            routeLTrafficScore.add(overallScore);
            counter++;
        }
        return routeLTrafficScore;
    }

}
